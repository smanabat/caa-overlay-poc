[{"/Users/developer/Source/caa/temp/src/index.js":"1","/Users/developer/Source/caa/temp/src/App.js":"2","/Users/developer/Source/caa/temp/src/reportWebVitals.js":"3","/Users/developer/Source/caa/temp/src/components/polygonLayer.js":"4","/Users/developer/Source/caa/temp/src/components/canvas.js":"5","/Users/developer/Source/caa/temp/src/store.js":"6","/Users/developer/Source/caa/temp/src/components/regions.js":"7","/Users/developer/Source/caa/temp/src/components/baseImage.js":"8","/Users/developer/Source/caa/temp/src/components/regionsList.js":"9","/Users/developer/Source/caa/temp/src/components/pointLabels.js":"10"},{"size":500,"mtime":1607118718155,"results":"11","hashOfConfig":"12"},{"size":5494,"mtime":1607366570722,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1607118718156,"results":"14","hashOfConfig":"12"},{"size":4048,"mtime":1607143505040,"results":"15","hashOfConfig":"12"},{"size":7939,"mtime":1607377256999,"results":"16","hashOfConfig":"12"},{"size":1133,"mtime":1607374282915,"results":"17","hashOfConfig":"12"},{"size":1639,"mtime":1607365940748,"results":"18","hashOfConfig":"12"},{"size":1484,"mtime":1607366711145,"results":"19","hashOfConfig":"12"},{"size":1626,"mtime":1607366557784,"results":"20","hashOfConfig":"12"},{"size":1708,"mtime":1607376765883,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"19uo54u",{"filePath":"25","messages":"26","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/developer/Source/caa/temp/src/index.js",[],["47","48"],"/Users/developer/Source/caa/temp/src/App.js",["49","50","51","52","53","54","55","56","57","58","59","60","61","62"],"import React, {useRef, useState} from \"react\";\nimport './App.css';\nimport {Stage, Layer, Star, Text, Image} from 'react-konva';\nimport {useImage} from 'use-image';\nimport ReactJson from \"react-json-view\";\nimport {PolygonLayer} from \"./components/polygonLayer\";\nimport imgMountain from './assets/sead-dedic-VDJ9BH4K1x4-unsplash.jpg'\nimport Canvas from \"./components/canvas\";\nimport {RegionsList} from \"./components/regionsList\";\n\nfunction generateShapes() {\n    return [...Array(10)].map((_, i) => ({\n        id: i.toString(),\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight,\n        rotation: Math.random() * 180,\n        isDragging: false,\n    }));\n}\n\nconst INITIAL_STATE = generateShapes();\n\nconst LionImage = () => {\n    const [image] = useImage('https://konvajs.org/assets/lion.png');\n    return <Image image={image} />;\n};\n\nclass URLImage extends React.Component {\n    state = {\n        image: null\n    };\n    componentDidMount() {\n        this.loadImage();\n    }\n    componentDidUpdate(oldProps) {\n        if (oldProps.src !== this.props.src) {\n            this.loadImage();\n        }\n    }\n    componentWillUnmount() {\n        this.image.removeEventListener('load', this.handleLoad);\n    }\n    loadImage() {\n        // save to \"this\" to remove \"load\" handler on unmount\n        this.image = new window.Image();\n        this.image.src = this.props.src;\n        this.image.addEventListener('load', this.handleLoad);\n    }\n    handleLoad = () => {\n        // after setState react-konva will update canvas and redraw the layer\n        // because \"image\" property is changed\n        this.setState({\n            image: this.image\n        });\n        // if you keep same image object during source updates\n        // you will have to update layer manually:\n        // this.imageNode.getLayer().batchDraw();\n    };\n    render() {\n        return (\n            <Image\n                x={this.props.x}\n                y={this.props.y}\n                scale={{\n                    x: .25,\n                    y: .25\n                }}\n                image={this.state.image}\n                ref={node => {\n                    this.imageNode = node;\n                }}\n            />\n        );\n    }\n}\n\nfunction App() {\n    const [stars, setStars] = useState(INITIAL_STATE);\n    const [clicked, setClicked] = useState({});\n    const [mouseMove, setMouseMove] = useState({});\n    const stageRef = useRef(null)\n\n    const handleDragStart = (e) => {\n        const id = e.target.id();\n        setStars(\n            stars.map((star) => {\n                return {\n                    ...star,\n                    isDragging: star.id === id,\n                };\n            })\n        );\n    };\n    const handleDragEnd = (e) => {\n        setStars(\n            stars.map((star) => {\n                return {\n                    ...star,\n                    isDragging: false,\n                };\n            })\n        );\n    }\n\n    const handleClick = (e) => {\n        setClicked(e);\n    }\n\n    const handleMouseMove = (e) => {\n        setMouseMove(e);\n    }\n\n    return (\n        <>\n            {stageRef && stageRef.current && <ReactJson src={JSON.parse(stageRef.current.toJSON())}/>}\n            <div className=\"left-panel\">\n                Brigthess\n                <input\n                    id=\"slider\"\n                    type=\"range\"\n                    min=\"-1\"\n                    max=\"1\"\n                    step=\"0.05\"\n                    defaultValue=\"0\"\n                />\n                <RegionsList />\n            </div>\n            <div className=\"right-panel\">\n                <Canvas />\n            </div>\n            {/*<PolygonLayer ref={stageRef}/>*/}\n\n            {/*<Stage*/}\n            {/*    onMouseDown={handleClick}*/}\n            {/*    onMouseMove={handleMouseMove}*/}\n            {/*    ref={stageRef} width={window.innerWidth} height={window.innerHeight}>*/}\n            {/*    <Layer>*/}\n            {/*        <URLImage src={imgMountain} x={150}/>*/}\n            {/*    </Layer>*/}\n\n            {/*    <Layer>*/}\n            {/*        <Text text=\"Try to drag a star\"/>*/}\n            {/*        {stars.map((star) => (*/}\n            {/*            <Star*/}\n            {/*                key={star.id}*/}\n            {/*                id={star.id}*/}\n            {/*                x={star.x}*/}\n            {/*                y={star.y}*/}\n            {/*                numPoints={10}*/}\n            {/*                innerRadius={20}*/}\n            {/*                outerRadius={40}*/}\n            {/*                fill=\"#89b717\"*/}\n            {/*                opacity={0.8}*/}\n            {/*                draggable*/}\n            {/*                rotation={star.rotation}*/}\n            {/*                shadowColor=\"black\"*/}\n            {/*                shadowBlur={10}*/}\n            {/*                shadowOpacity={0.6}*/}\n            {/*                shadowOffsetX={star.isDragging ? 10 : 5}*/}\n            {/*                shadowOffsetY={star.isDragging ? 10 : 5}*/}\n            {/*                scaleX={star.isDragging ? 1.2 : 1}*/}\n            {/*                scaleY={star.isDragging ? 1.2 : 1}*/}\n            {/*                onDragStart={handleDragStart}*/}\n            {/*                onDragEnd={handleDragEnd}*/}\n            {/*            />*/}\n            {/*        ))}*/}\n            {/*    </Layer>*/}\n            {/*</Stage>*/}\n        </>\n    );\n}\n\nexport default App;\n","/Users/developer/Source/caa/temp/src/reportWebVitals.js",[],"/Users/developer/Source/caa/temp/src/components/polygonLayer.js",["63","64","65","66"],"import React, {Component, useState} from \"react\";\nimport Konva from \"konva\";\nimport {render} from \"react-dom\";\nimport {Stage, Layer, Group, Line, Rect} from \"react-konva\";\n\nconst defaultState = {\n    points: [],\n    curMousePos: [0, 0],\n    isMouseOverStartPoint: false,\n    isFinished: false\n};\n\nexport const PolygonLayer = () => {\n    const [points, setPoints] = useState(defaultState.points);\n    const [curMousePos, setCurMousePos] = useState(defaultState.curMousePos);\n    const [isMouseOverStartPoint, setIsMouseOverStartPoint] = useState(defaultState.isMouseOverStartPoint);\n    const [isFinished, setisFinished] = useState(defaultState.isFinished);\n\n\n    const getMousePos = stage => {\n        return [stage.getPointerPosition().x, stage.getPointerPosition().y];\n    };\n\n    const handleClick = event => {\n        const stage = event.target.getStage();\n        const mousePos = getMousePos(stage);\n\n        if (isFinished) {\n            return;\n        }\n        if (isMouseOverStartPoint && points.length >= 3) {\n            setisFinished(true)\n        } else {\n            setPoints([...points, mousePos])\n        }\n    };\n\n    const handleMouseMove = event => {\n        const stage = event.target.getStage();\n        const mousePos = getMousePos(stage);\n\n        setCurMousePos(mousePos);\n    };\n    const handleMouseOverStartPoint = event => {\n        if (isFinished || points.length < 3) return;\n        event.target.scale({x: 2, y: 2});\n        setIsMouseOverStartPoint(true)\n    };\n\n    const handleMouseOutStartPoint = event => {\n        event.target.scale({x: 1, y: 1});\n        setIsMouseOverStartPoint(false)\n    };\n\n    const handleDragStartPoint = event => {\n        console.log(\"start\", event);\n    };\n\n    const handleDragMovePoint = event => {\n        const index = event.target.index - 1;\n        console.log(event.target);\n        const pos = [event.target.attrs.x, event.target.attrs.y];\n        console.log(\"move\", event);\n        console.log(pos);\n        setPoints([...points.slice(0, index), pos, ...points.slice(index + 1)])\n    };\n\n    const handleDragOutPoint = event => {\n        console.log(\"end\", event);\n    };\n\n    const flattenedPoints = points\n        .concat(isFinished ? [] : curMousePos)\n        .reduce((a, b) => a.concat(b), []);\n    return (\n        <Stage\n            width={window.innerWidth}\n            height={window.innerHeight}\n            onMouseDown={handleClick}\n            onMouseMove={handleMouseMove}\n        >\n            <Layer>\n                <Line\n                    points={flattenedPoints}\n                    stroke=\"black\"\n                    strokeWidth={5}\n                    closed={isFinished}\n                    fill={'red'}\n                />\n                {points.map((point, index) => {\n                    const width = 6;\n                    const x = point[0] - width / 2;\n                    const y = point[1] - width / 2;\n                    const startPointAttr =\n                        index === 0\n                            ? {\n                                hitStrokeWidth: 12,\n                                onMouseOver: handleMouseOverStartPoint,\n                                onMouseOut: handleMouseOutStartPoint\n                            }\n                            : null;\n                    return (\n                        <Rect\n                            key={index}\n                            x={x}\n                            y={y}\n                            width={width}\n                            height={width}\n                            fill=\"white\"\n                            stroke=\"black\"\n                            strokeWidth={3}\n                            onDragStart={handleDragStartPoint}\n                            onDragMove={handleDragMovePoint}\n                            onDragEnd={handleDragOutPoint}\n                            draggable\n                            {...startPointAttr}\n                        />\n                    );\n                })}\n            </Layer>\n        </Stage>\n    );\n}\n\n","/Users/developer/Source/caa/temp/src/components/canvas.js",["67","68","69","70"],"/Users/developer/Source/caa/temp/src/store.js",[],"/Users/developer/Source/caa/temp/src/components/regions.js",["71"],"import React from \"react\";\nimport { Layer, Line } from \"react-konva\";\n\nimport useStore from \"../store\";\n\nexport default () => {\n    const regions = useStore(s => s.regions);\n    const layerRef = React.useRef(null);\n\n    const selectedId = useStore(s => s.selectedRigionId);\n    const selectRegion = useStore(s => s.selectRegion);\n\n    return (\n        <Layer ref={layerRef}>\n            {regions.map(region => {\n                const isSelected = region.id === selectedId;\n                return (\n                    <React.Fragment key={region.id}>\n                        {/* first we need to erase previous drawings */}\n                        {/* we can do it with  destination-out blend mode */}\n                        <Line\n                            globalCompositeOperation=\"destination-out\"\n                            points={region.points.flatMap(p => [p.x, p.y])}\n                            fill=\"black\"\n                            listening={false}\n                            closed\n                        />\n                        {/* then we just draw new region */}\n                        <Line\n                            name=\"region\"\n                            points={region.points.flatMap(p => [p.x, p.y])}\n                            fill={region.color}\n                            closed\n                            opacity={isSelected ? 1 : 0.8}\n                            onClick={() => {\n                                selectRegion(region.id);\n                            }}\n                        />\n                    </React.Fragment>\n                );\n            })}\n        </Layer>\n    );\n};\n","/Users/developer/Source/caa/temp/src/components/baseImage.js",["72","73"],"import React from \"react\";\nimport { Image, Layer } from \"react-konva\";\nimport useImage from \"use-image\";\nimport imgMountain from '../assets/sead-dedic-VDJ9BH4K1x4-unsplash.jpg'\n\nimport useStore from \"../store\";\n\nconst IMAGE_NUMBER = 1 + Math.round(Math.random() * 1);\nconst IMAGE_URL = imgMountain;\n\nexport default () => {\n    const [image] = useImage(IMAGE_URL, \"Anonymous\");\n\n    const setImageSize = useStore(state => state.setImageSize);\n    const setScale = useStore(state => state.setScale);\n    const setSize = useStore(state => state.setSize);\n    const width = useStore(state => state.width);\n    const height = useStore(state => state.height);\n\n    const { brightness } = useStore();\n\n    React.useEffect(() => {\n        if (!image) {\n            return;\n        }\n        const scale = Math.min(width / image.width, height / image.height);\n        setScale(scale);\n        setImageSize({ width: image.width, height: image.height });\n\n        const ratio = image.width / image.height;\n        setSize({\n            width: width,\n            height: width / ratio\n        });\n    }, [image, width, height, setScale, setImageSize, setSize]);\n\n    const layerRef = React.useRef(null);\n\n    React.useEffect(() => {\n        const canvas = layerRef.current.getCanvas()._canvas;\n        canvas.style.filter = `brightness(${(brightness + 1) * 100}%)`;\n    }, [brightness]);\n\n    return (\n        <Layer ref={layerRef}>\n            <Image image={image} />\n        </Layer>\n    );\n};\n","/Users/developer/Source/caa/temp/src/components/regionsList.js",[],"/Users/developer/Source/caa/temp/src/components/pointLabels.js",["74","75","76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":3,"column":9,"nodeType":"83","messageId":"84","endLine":3,"endColumn":14},{"ruleId":"81","severity":1,"message":"85","line":3,"column":16,"nodeType":"83","messageId":"84","endLine":3,"endColumn":21},{"ruleId":"81","severity":1,"message":"86","line":3,"column":23,"nodeType":"83","messageId":"84","endLine":3,"endColumn":27},{"ruleId":"81","severity":1,"message":"87","line":3,"column":29,"nodeType":"83","messageId":"84","endLine":3,"endColumn":33},{"ruleId":"81","severity":1,"message":"88","line":6,"column":9,"nodeType":"83","messageId":"84","endLine":6,"endColumn":21},{"ruleId":"81","severity":1,"message":"89","line":7,"column":8,"nodeType":"83","messageId":"84","endLine":7,"endColumn":19},{"ruleId":"81","severity":1,"message":"90","line":23,"column":7,"nodeType":"83","messageId":"84","endLine":23,"endColumn":16},{"ruleId":"81","severity":1,"message":"91","line":28,"column":7,"nodeType":"83","messageId":"84","endLine":28,"endColumn":15},{"ruleId":"81","severity":1,"message":"92","line":79,"column":12,"nodeType":"83","messageId":"84","endLine":79,"endColumn":19},{"ruleId":"81","severity":1,"message":"93","line":80,"column":12,"nodeType":"83","messageId":"84","endLine":80,"endColumn":21},{"ruleId":"81","severity":1,"message":"94","line":83,"column":11,"nodeType":"83","messageId":"84","endLine":83,"endColumn":26},{"ruleId":"81","severity":1,"message":"95","line":94,"column":11,"nodeType":"83","messageId":"84","endLine":94,"endColumn":24},{"ruleId":"81","severity":1,"message":"96","line":105,"column":11,"nodeType":"83","messageId":"84","endLine":105,"endColumn":22},{"ruleId":"81","severity":1,"message":"97","line":109,"column":11,"nodeType":"83","messageId":"84","endLine":109,"endColumn":26},{"ruleId":"81","severity":1,"message":"98","line":1,"column":16,"nodeType":"83","messageId":"84","endLine":1,"endColumn":25},{"ruleId":"81","severity":1,"message":"99","line":2,"column":8,"nodeType":"83","messageId":"84","endLine":2,"endColumn":13},{"ruleId":"81","severity":1,"message":"100","line":3,"column":9,"nodeType":"83","messageId":"84","endLine":3,"endColumn":15},{"ruleId":"81","severity":1,"message":"101","line":4,"column":23,"nodeType":"83","messageId":"84","endLine":4,"endColumn":28},{"ruleId":"102","severity":1,"message":"103","line":80,"column":1,"nodeType":"104","endLine":268,"endColumn":3},{"ruleId":"105","severity":1,"message":"106","line":116,"column":8,"nodeType":"107","endLine":116,"endColumn":10,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":188,"column":59,"nodeType":"111","messageId":"112","endLine":188,"endColumn":61},{"ruleId":"109","severity":1,"message":"110","line":195,"column":63,"nodeType":"111","messageId":"112","endLine":195,"endColumn":65},{"ruleId":"102","severity":1,"message":"103","line":6,"column":1,"nodeType":"104","endLine":44,"endColumn":3},{"ruleId":"81","severity":1,"message":"113","line":8,"column":7,"nodeType":"83","messageId":"84","endLine":8,"endColumn":19},{"ruleId":"102","severity":1,"message":"103","line":11,"column":1,"nodeType":"104","endLine":49,"endColumn":3},{"ruleId":"81","severity":1,"message":"114","line":8,"column":11,"nodeType":"83","messageId":"84","endLine":8,"endColumn":25},{"ruleId":"81","severity":1,"message":"115","line":11,"column":11,"nodeType":"83","messageId":"84","endLine":11,"endColumn":21},{"ruleId":"81","severity":1,"message":"116","line":12,"column":11,"nodeType":"83","messageId":"84","endLine":12,"endColumn":23},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'Stage' is defined but never used.","Identifier","unusedVar","'Layer' is defined but never used.","'Star' is defined but never used.","'Text' is defined but never used.","'PolygonLayer' is defined but never used.","'imgMountain' is defined but never used.","'LionImage' is assigned a value but never used.","'URLImage' is defined but never used.","'clicked' is assigned a value but never used.","'mouseMove' is assigned a value but never used.","'handleDragStart' is assigned a value but never used.","'handleDragEnd' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleMouseMove' is assigned a value but never used.","'Component' is defined but never used.","'Konva' is defined but never used.","'render' is defined but never used.","'Group' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'height' and 'setSize'. Either include them or remove the dependency array.","ArrayExpression",["119"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'IMAGE_NUMBER' is assigned a value but never used.","'setPointLabels' is assigned a value but never used.","'selectedId' is assigned a value but never used.","'selectRegion' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},"Update the dependencies array to be: [height, setSize]",{"range":"122","text":"123"},[3236,3238],"[height, setSize]"]